// <auto-generated />
using System;
using Desktop_cha_qaqc_phase2.Core.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Desktop_cha_qaqc_phase2.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220515113027_update_db")]
    partial class update_db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.CurlingForceTestingConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestPurpose")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampFinish")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CurlingForceTestingConfiguration");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.CurlingForceTestSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurlingForceTestingConfigurationsId")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("DeformationDegree")
                        .HasColumnType("REAL");

                    b.Property<int?>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Load")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfError")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tester")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurlingForceTestingConfigurationsId");

                    b.ToTable("CurlingForceTestSheets");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.DeformationTestingConfigurations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestPurpose")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampFinish")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStart")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("DeformationTestingConfigurations");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.DeformationTestSheet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeformationTestingConfigurationsID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfError")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfTest")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("StatusLidNotBreak")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusLidNotLeak")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusLidResult")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPlinthNotBreak")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPlinthNotLeak")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPlinthResult")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tester")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TimeSmoothClosingLid")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.Property<double?>("TimeSmoothClosingPlinth")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("DeformationTestingConfigurationsID");

                    b.ToTable("DeformationTestSheet");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.EnduranceSettingParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("CompressionForceSettingsystem12")
                        .HasColumnType("REAL");

                    b.Property<float>("CompressionForceSettingsystem3")
                        .HasColumnType("REAL");

                    b.Property<short>("NumberClick12")
                        .HasColumnType("INTEGER");

                    b.Property<short>("NumberClick3")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeOccupying12")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeOccupying3")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("system12")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("system3")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("EnduranceSettingParameters");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.HistoryDeformationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumberOfTest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeformationHistoryReports");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.HistoryEnduranceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameTest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EnduranceHistoryReports");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.HistoryReliabilityReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NumberOfTest")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ReliabilityHistoryReports");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.ReliabilityTestingConfigurations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestPurpose")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampFinish")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStart")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ReliabilityTestingConfigurations");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.ReliabilityTestSheet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfError")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NumberOfTest")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReliabilityTestingConfigurationsID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StaffCheck")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusLidNotFall")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusLidNotLeak")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusLidResult")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPlinthNotFall")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPlinthNotLeak")
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusPlinthResult")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TimeSmoothClosingLid")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.Property<double?>("TimeSmoothClosingPlinth")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ReliabilityTestingConfigurationsID");

                    b.ToTable("ReliabilityTestSheet");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.RockTestTestingConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestPurpose")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampFinish")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RockTestTestingConfigurations");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.RockTestTestSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Load")
                        .HasColumnType("REAL");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfError")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Passed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RockTestTestingConfigurationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestedTimes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tester")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RockTestTestingConfigurationsId");

                    b.ToTable("RockTestTestSheets");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.StaticLoadTestingConfigurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestPurpose")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStampFinish")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStampStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StaticLoadTestingConfigurations");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.StaticLoadTestSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NumberOfError")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StaticLoadTestingConfigurationsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tester")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StaticLoadTestingConfigurationsId");

                    b.ToTable("StaticLoadTestSheets");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.CurlingForceTestSheet", b =>
                {
                    b.HasOne("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.CurlingForceTestingConfigurations", null)
                        .WithMany("TestSheet")
                        .HasForeignKey("CurlingForceTestingConfigurationsId");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.DeformationTestSheet", b =>
                {
                    b.HasOne("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.DeformationTestingConfigurations", null)
                        .WithMany("Testsheet")
                        .HasForeignKey("DeformationTestingConfigurationsID");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.ReliabilityTestSheet", b =>
                {
                    b.HasOne("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.ReliabilityTestingConfigurations", null)
                        .WithMany("Testsheet")
                        .HasForeignKey("ReliabilityTestingConfigurationsID");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.RockTestTestSheet", b =>
                {
                    b.HasOne("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.RockTestTestingConfigurations", null)
                        .WithMany("TestSheets")
                        .HasForeignKey("RockTestTestingConfigurationsId");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.StaticLoadTestSheet", b =>
                {
                    b.HasOne("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.StaticLoadTestingConfigurations", null)
                        .WithMany("TestSheets")
                        .HasForeignKey("StaticLoadTestingConfigurationsId");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.CurlingForceTestingConfigurations", b =>
                {
                    b.Navigation("TestSheet");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.DeformationTestingConfigurations", b =>
                {
                    b.Navigation("Testsheet");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.ReliabilityTestingConfigurations", b =>
                {
                    b.Navigation("Testsheet");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.RockTestTestingConfigurations", b =>
                {
                    b.Navigation("TestSheets");
                });

            modelBuilder.Entity("Desktop_cha_qaqc_phase2.Core.Domain.Models.Resource.StaticLoadTestingConfigurations", b =>
                {
                    b.Navigation("TestSheets");
                });
#pragma warning restore 612, 618
        }
    }
}
